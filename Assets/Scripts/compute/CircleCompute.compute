#pragma kernel CSMain

#define NUM_THREAD_X 8 
#define NUM_THREAD_Y 1 
#define NUM_THREAD_Z 1 
#define PI 3.14159265

struct circlePointData {
    float3 velocity;
    float3 position;
};

struct circleSegmentData{
    float3 start;
    float3 end;
};

cbuffer CB{
    float3 _CurrentOffset;
    float3 _CurrentRotation;
    float _TimeStep;
    uint _CirclePointCount;
}

RWStructuredBuffer<circlePointData> _CirclePointBuffer;
RWStructuredBuffer<circleSegmentData> _CircleSegmentBuffer;
RWStructuredBuffer<circleSegmentData> _CircleSegmentRenderBuffer;

inline float3x3 xRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        1, 0, 0,
        0, c, -s,
        0, s, c);
}
 
inline float3x3 yRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        c, 0, s,
        0, 1, 0,
        -s, 0, c);
}
 
inline float3x3 zRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        c, -s, 0,
        s, c, 0,
        0, 0, 1);
}

inline float3 RotateRadians(float3 rotation, float3 currentPosition){
    float3 xRotatedPosition = mul(xRotation3dRadians(radians(rotation.x)), currentPosition);
    float3 yRotatedPosition = mul(yRotation3dRadians(radians(rotation.y)), xRotatedPosition);
    float3 zRotatedPosition = mul(zRotation3dRadians(radians(rotation.z)), yRotatedPosition);
    return zRotatedPosition;
}

[numthreads(NUM_THREAD_X, NUM_THREAD_Y, NUM_THREAD_Z)]
void CSMain ( uint3 Gid  : SV_GroupID,
              uint3 GTid : SV_GroupThreadID,
              uint3 DTid : SV_DispatchThreadID,
			  uint  GI   : SV_GroupIndex )
{
    float3 offset = _CurrentOffset;
    int idx = DTid.x;
    float3 velocity = _CirclePointBuffer[idx].velocity;
    float3 position = _CirclePointBuffer[idx].position;
    position += velocity * _TimeStep;
    _CirclePointBuffer[idx].position = position;
    int nextPointIndex = 0;
    if (idx == _CirclePointCount - 1){
        nextPointIndex = 0;
    }
    else {
        nextPointIndex = idx + 1;
    }
    float3 nextPos = _CirclePointBuffer[nextPointIndex].position;
    _CircleSegmentBuffer[idx].start = position;
    _CircleSegmentBuffer[idx].end = nextPos;
    //Add Rotation and Position Change
    //float3 xRotatedPosition = mul(xRotation3dRadians(radians(_CurrentRotation.x)), position);
    //float3 xRotatedNextPosition = mul(xRotation3dRadians(radians(_CurrentRotation.z)), nextPos);
    float3 rotatedPosition = RotateRadians(_CurrentRotation, position);
    float3 rotatedPositionNext = RotateRadians(_CurrentRotation, nextPos);
    _CircleSegmentRenderBuffer[idx].start = rotatedPosition + offset;
    _CircleSegmentRenderBuffer[idx].end = rotatedPositionNext + offset;
}
