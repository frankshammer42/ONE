#pragma kernel CSMain  // カーネル関数を指定

#define NUM_THREAD_X 8 // スレッド数 X成分
#define NUM_THREAD_Y 1 // スレッド数 Y成分
#define NUM_THREAD_Z 1 // スレッド数 Z成分

#define PI 3.14159265

struct ParticleData
{
	float3 velocity; // 速度
	float3 position; // 位置
};

cbuffer CB
{
	float3 _Gravity;   
	float3 _AreaSize;  
	float3 _PreviousOffset;
	float3 _CurrentOffset;
	float  _TimeStep;  
	float3 _AttractorPos;
	uint _ParticleCount;
}

RWStructuredBuffer<ParticleData> _ParticleBuffer;

float rand(float2 co)
{
    return frac(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

float3 randomInsideUnitSphere (float co)
{  
	float phi = 2 * PI * rand(co);
	float th  = acos(1.0 - 2.0 * rand(co + float2(0.0, 0.1)));
	float r   = pow(rand(co + float2(0.0, 0.2)), 0.333333333);
  
	float x = r * sin(th) * cos(phi);
	float y = r * sin(th) * sin(phi);
	float z = r * cos(th);
  
	return float3(x, y, z);
}


[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void CSMain ( uint3 Gid  : SV_GroupID,
              uint3 GTid : SV_GroupThreadID,
              uint3 DTid : SV_DispatchThreadID,
			  uint  GI   : SV_GroupIndex )
{
    float3 offset = _CurrentOffset - _PreviousOffset;
    float3 center = _CurrentOffset;
	int idx = DTid.x;
	float3 velocity = _ParticleBuffer[idx].velocity;
	float3 position = _ParticleBuffer[idx].position;
	float3 distanceVec = _AttractorPos - position;
	float distanceMag = distance(_AttractorPos, position); 
    float3 acceleration = distanceVec/30;
	if (distanceMag < 6){
	   acceleration = float3(0,0,0);
	   velocity = randomInsideUnitSphere(idx);
	}
    velocity += acceleration * _TimeStep;
    position += velocity     * _TimeStep;
    _ParticleBuffer[idx].velocity = velocity;
    _ParticleBuffer[idx].position = position + offset;
}
