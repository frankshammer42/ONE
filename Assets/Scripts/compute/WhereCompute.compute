// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define NUM_THREAD_X 8 
#define NUM_THREAD_Y 1 
#define NUM_THREAD_Z 1 
#define PI 3.14159265

struct WhereLineData{
    float3 start;
    float3 end;
    float3 velocity;
};

cbuffer CB{
    float3 _Offset; 
    float3 _CurrentRotation;
    float _HalfSize;
    float _TimeStep;
}

RWStructuredBuffer<WhereLineData> _WhereLineBuffer;
RWStructuredBuffer<WhereLineData> _WhereLineRenderBuffer;

inline float3x3 xRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        1, 0, 0,
        0, c, -s,
        0, s, c);
}
 
inline float3x3 yRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        c, 0, s,
        0, 1, 0,
        -s, 0, c);
}
 
inline float3x3 zRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        c, -s, 0,
        s, c, 0,
        0, 0, 1);
}

inline float3 RotateRadians(float3 rotation, float3 currentPosition){
    float3 xRotatedPosition = mul(xRotation3dRadians(radians(rotation.x)), currentPosition);
    float3 yRotatedPosition = mul(yRotation3dRadians(radians(rotation.y)), xRotatedPosition);
    float3 zRotatedPosition = mul(zRotation3dRadians(radians(rotation.z)), yRotatedPosition);
    return zRotatedPosition;
}

bool insideRange(float lower, float higher, float val){
    if (val < higher && val > lower){
        return true;
    }
    return false;
}


bool insideCube(float3 pos){
    float bigCubeHalf = _HalfSize + _HalfSize/2.0;
    float lowerBound = -bigCubeHalf;
    if (insideRange(lowerBound, bigCubeHalf, pos.x) && insideRange(lowerBound, bigCubeHalf, pos.y) && insideRange(lowerBound, bigCubeHalf, pos.z)){
        return true;
    }
    return false;
} 


[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void CSMain ( uint3 Gid  : SV_GroupID,
              uint3 GTid : SV_GroupThreadID,
              uint3 DTid : SV_DispatchThreadID,
			  uint  GI   : SV_GroupIndex )
{
    float3 offset = _Offset;
	int idx = DTid.x;
	float3 velocity = _WhereLineBuffer[idx].velocity;
	float3 start = _WhereLineBuffer[idx].start;
	float3 end = _WhereLineBuffer[idx].end;
	start += velocity*_TimeStep;
	end += velocity*_TimeStep;
	if (!insideCube(start)){
	    velocity = -1*velocity;
	}
	_WhereLineBuffer[idx].start = start;
	_WhereLineBuffer[idx].end = end; 
	_WhereLineBuffer[idx].velocity = velocity; 
	
    float3 rotatedPosition = RotateRadians(_CurrentRotation, start);
    float3 rotatedPositionNext = RotateRadians(_CurrentRotation, end);
    _WhereLineRenderBuffer[idx].start = rotatedPosition + offset;
    _WhereLineRenderBuffer[idx].end = rotatedPositionNext + offset;
    _WhereLineRenderBuffer[idx].velocity = velocity;
}
